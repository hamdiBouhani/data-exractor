// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

/* DLQMetadata contains metadata from the original kafka message.
 * The metadata will be encoded and decoded when sending or receiving
 * messages from the DLQ cluster in order to present the library
 * user a seamless logical topic. */
message DLQMetadata {
    // retry_count is an incrementing value denoting the number
    // of times a message has been redelivered.
    // It will be 0 on first delivery.
    int64 retry_count = 1;
    // topic is the original kafka topic the mesasge was received on.
    // This is analogous to the logical topic name.
    string topic = 2;
    // partition is the original kafka partition the message was received on.
    int32 partition = 3;
    // offset is the record offset of the original message in the original topic-partition.
    int64 offset = 4;
    // timestamp_ns is the original record timestamp of the original mesage.
    int64 timestamp_ns = 5;
    // data is a byte buffer for storing arbitrary information.
    // This is useful if the Kafka Broker version used is < 0.11
    // and hence Kafka native record headers (KAFKA-4208) are unavaiable
    // so the DLQ metadata must be stored in the record Key or Value.
    bytes data = 6;
}